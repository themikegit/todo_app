{"version":3,"sources":["comp/assets/check.svg","comp/assets/close.svg","comp/assets/restore.svg","comp/assets/add.svg","comp/Task.js","comp/TaskCounter.js","comp/Control.js","comp/Wrap.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Task","props","className","onClick","delete","date","src","close","alt","style","isComplete","opacity","task","importance","by","complete","index","restore","check","TaskCounter","count","Control","console","log","name","value","onChange","changer","type","placeholder","id","disabled","selected","submit","add","Wrap","today","Date","time","getHours","getMinutes","getSeconds","useState","data","setData","newData","setNewData","deleter","dte","newDt","filter","item","completer","arr","completed","length","map","key","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec15a75e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.5f340c4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.d1ac71d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/restore.11e8554a.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.f1008644.svg\";","import React from \"react\";\nimport check from \"./assets/check.svg\";\nimport close from \"./assets/close.svg\";\nimport restore from \"./assets/restore.svg\";\n\nexport default function Task(props) {\n\treturn (\n\t\t<div className=\"task\">\n\t\t\t<div onClick={() => props.delete(props.date)} className=\"close\">\n\t\t\t\t<img src={close} alt=\"\" />\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tstyle={props.isComplete ? { opacity: \"0.2\" } : { opacity: \"1\" }}\n\t\t\t\tclassName=\"task-content\"\n\t\t\t>\n\t\t\t\t<div className=\"task-text\">\n\t\t\t\t\t<h4> {props.task} </h4>\n\t\t\t\t</div>\n\t\t\t\t<hr className=\"divider\" />\n\t\t\t\t<div className=\"task-info\">\n\t\t\t\t\t<span> imp: {props.importance} </span>{\" \"}\n\t\t\t\t\t<span>by: {props.by} </span>\n\t\t\t\t\t<span> added: {props.date} </span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div onClick={() => props.complete(props.index)} className=\"task-button\">\n\t\t\t\t<img src={props.isComplete ? restore : check} alt=\"\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\n\nexport default function TaskCounter(props) {\n\treturn (\n\t\t<div className=\"counter\">\n\t\t\t<h3>Total Tasks: {props.count} </h3>\n\t\t</div>\n\t);\n}\n","import React, { useState } from \"react\";\nimport \"./Style.css\";\nimport add from \"./assets/add.svg\";\n\nexport default function Control(props) {\n\tconsole.log(props.by);\n\n\treturn (\n\t\t<div className=\"control\">\n\t\t\t<div className=\"control-data\">\n\t\t\t\t<div className=\"user-info\">\n\t\t\t\t\t<div className=\"user-name\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"by\"\n\t\t\t\t\t\t\tvalue={props.by}\n\t\t\t\t\t\t\tonChange={props.changer}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Your name...\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"user-select\">\n\t\t\t\t\t\t<select name=\"importance\" onChange={props.changer} id=\"slc\">\n\t\t\t\t\t\t\t<option value=\"\" disabled selected>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\tSelect importance{\" \"}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t<option value=\"high\"> high </option>\n\t\t\t\t\t\t\t<option value=\"medium\"> medium </option>\n\t\t\t\t\t\t\t<option value=\"low\"> low</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"user-task\">\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tvalue={props.task}\n\t\t\t\t\t\tname=\"task\"\n\t\t\t\t\t\tonChange={props.changer}\n\t\t\t\t\t\ttype=\"text-area\"\n\t\t\t\t\t\tplaceholder=\"Type your task...\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div onClick={props.submit} className=\"control-btn\">\n\t\t\t\t<div>\n\t\t\t\t\t<img src={add} alt=\"\" /> ADD{\" \"}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React, { useState } from \"react\";\nimport Task from \"./Task\";\nimport TaskCounter from \"./TaskCounter\";\nimport Control from \"./Control\";\nimport \"./Style.css\";\n\nexport default function Wrap() {\n\tconst today = new Date();\n\tconst time =\n\t\ttoday.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\n\t//render state\n\tconst [data, setData] = useState([]);\n\n\t//virtual middle state\n\tconst [newData, setNewData] = useState({ by: \"\", task: \"\", date: \"\" });\n\n\t//catch input changes\n\tconst changer = (e) => {\n\t\tsetNewData({\n\t\t\t...newData,\n\t\t\t[e.target.name]: e.target.value,\n\t\t\tdate: time,\n\t\t\tcompleted: false,\n\t\t});\n\t};\n\n\t//add new task\n\tconst submit = () => {\n\t\tnewData.task\n\t\t\t? setData([...data, newData])\n\t\t\t: setData([...data, {task: \"BLANK TASK\", completed: true}])\n\t\t//empty fileds\n\t\tsetNewData({ by: \"\", task: \"\" });\n\t};\n\n\t//delete task\n\tconst deleter = (dte) => {\n\t\tconst newDt = data.filter((item) => item.date !== dte);\n\t\tconsole.log(newDt);\n\t\tsetData(newDt);\n\t};\n\n\t//complete task\n\tconst completer = (index) => {\n\t\tconst arr = [...data];\n\t\tif (arr[index].completed) {\n\t\t\tarr[index].completed = false;\n\t\t} else {\n\t\t\tarr[index].completed = true;\n\t\t}\n\t\tconsole.log(arr);\n\t\tsetData(arr);\n\t};\n\n\treturn (\n\t\t<div className=\"warp\">\n\t\t\t<TaskCounter count={data.length} />\n\n\t\t\t{data.map((item, index) => (\n\t\t\t\t<Task\n\t\t\t\t\tindex={index}\n\t\t\t\t\tisComplete={item.completed}\n\t\t\t\t\tcomplete={completer}\n\t\t\t\t\tdelete={deleter}\n\t\t\t\t\tkey={item.date}\n\t\t\t\t\tdate={item.date}\n\t\t\t\t\tby={item.by}\n\t\t\t\t\ttask={item.task}\n\t\t\t\t\timportance={item.importance}\n\t\t\t\t/>\n\t\t\t))}\n\n\t\t\t<Control\n\t\t\t\ttask={newData.task}\n\t\t\t\tby={newData.by}\n\t\t\t\tsubmit={submit}\n\t\t\t\tchanger={changer}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import React from \"react\";\nimport Wrap from \"./comp/Wrap\";\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<Wrap />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}